(:grammar PL0)
(:nb "from Algorithms and Data Structures by Niklaus Wirth.")

(:def program (:seq (:ref block) (:lit ".")))
(:def block
      (:seq (:opt (:seq (:lit "const")
                        (:sep (:seq (:ref IDENT)
                                    (:lit "=")
                                    (:ref NUMBER))
                              (:lit ","))
                        (:lit ";")))
            (:opt (:seq (:lit "var")
                        (:sep (:ref IDENT) (:lit ","))
                        (:lit ";")))
            (:opt (:seq (:lit "procedure")
                        (:ref IDENT)
                        (:lit";")
                        (:ref block)
                        (:lit ";")))
            (:ref statement)))

(:def statement
      (:alt (:seq (:ref IDENT) (:lit ":=") (:ref expression))
            (:seq (:lit "call") (:ref IDENT))
            (:seq (:lit "begin")
                  (:ref statement)
                  (:orp (:seq (:lit ";") (:ref statement)))
                  (:lit "end"))
            (:seq (:lit "if")
                  (:ref condition)
                  (:lit "do")
                  (:ref statement))
            (:nil (:nb empty statement))))

(:def condition
      (:alt (:seq (:lit "odd")
                  (:ref expression))
            (:seq (:ref expression)
                  (:alt (:lit "=") (:lit "≠")
                        (:lit "<") (:lit ">")
                        (:lit "≤") (:lit "≥"))
                  (:ref expression))))

(:def expression  (:seq (:ref term)
                        (:orp (:seq (:alt (:lit "+") (:lit "-"))
                                    (:ref term)))))

(:def term (:seq (:ref factor)
                 (:orp (:seq (:alt (:lit "×") (:lit "÷"))
                             (:ref factor)))))

(:def factor (:alt (:ref IDENT)
                   (:ref NUMBER)
                   (:seq (:lit "(")
                         (:ref expression)
                         (:lit ")"))))
